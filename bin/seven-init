#!/usr/bin/env node

var program = require('commander');
var download = require('download-git-repo');
var exists = require('fs').existsSync;
var path = require('path');
var ora = require('ora');
var rm = require('rimraf').sync;
var home = require('user-home');
var chalk = require('chalk');
var inquirer = require('inquirer');
var checkVersion = require('../lib/check-version');

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')
  .parse(process.argv);


/**
 * help
 */
program.on('--help', function () {
  console.log();
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project'))
  console.log('    $ seven init ${project-name}')
  console.log()
});

/**
 * Settings
 */
var rawName = program.args[0];
var inPlace = !rawName || rawName === '.';
var name = inPlace
  ? path.relative('../', process.cwd())
  : rawName;
var to = path.resolve(rawName || '.');
var clone = program.clone || false;

/**
 * Padding
 */
console.log();
process.on('exit', function() {
  console.log();
});

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? '在现有目录下构建?'
      : '目录已存在 是否继续?',
    name: 'ok'
  }]).then(function (answers) {
    if (answers.ok) {
      selectType();
    }
  });
} else {
  selectType();
}


function selectType() {
  var prompts = [];
  var defaultOpts = {
    desc: 'A new project',
    branch: '0.0.1'
  }
  prompts.push({
    type: 'list',
    name: 'template',
    message: '请选择项目模板',
    choices: [{
      name: 'vue项目',
      value: 'vue'
    }, {
      name: 'weex项目',
      value: 'weex'
    }]
  });
  prompts.push({
    type: 'input',
    name: 'desc',
    message: `请输入项目描述[${defaultOpts.desc}]: `
  });
  prompts.push({
    type: 'input',
    name: 'branch',
    message: `请输入项目分支[${defaultOpts.branch}]: `
  });
  inquirer.prompt(prompts).then(function(answers) {
    var projectOpts = Object.assign(answers, defaultOpts);
    run(projectOpts);
  });
}

function run(opts) {
  var template = opts.template === 'vue'
    ? 'yuanzhaohao/scaffold-vue-webpack'
    : 'yuanzhaohao/scaffold-weex-webpack';
  var tmp = path.join(home, '.iot-template', opts.template.replace(/\//g, '-'));
  downloadAndGenerate(template, tmp);
  // checkVersion(function() {
  //   var officialTemplate = 'vuejs-templates/' + template;
  //   downloadAndGenerate(officialTemplate);
  // });
}

function downloadAndGenerate(template, tmp) {
  var spinner = ora('downloading template...');

  spinner.start();
  if (exists(tmp)) {
    rm(tmp);
  }
  download(template, tmp, {
    clone: clone
  }, function(err) {
    spinner.stop();
    if (err) {
      console.log(chalk.red('Failed to download repo ' + template + ': ' + err.message.trim()));
    }
    // generate(name, tmp, to, function(err) {
    //   if (err) {
    //     console.log(chalk.red(err));
    //   }
    //   console.log();
    //   console.log(chalk.green('Generated "%s".', name));
    // });
  });
}
