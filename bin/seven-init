#!/usr/bin/env node

const program = require('commander');
const download = require('download-git-repo');
const exists = require('fs').existsSync;
const path = require('path');
const ora = require('ora');
const rm = require('rimraf').sync;
const tildify = require('tildify')
const home = require('user-home');
const chalk = require('chalk');
const inquirer = require('inquirer');
const logger = require('../lib/logger');
const prompts = require('../lib/prompts');
const generate = require('../lib/generate');
const checkVersion = require('../lib/checkVersion');
const localPath = require('../lib/localPath');

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')
  .parse(process.argv);


/**
 * help
 */
program.on('--help', function () {
  console.log();
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project'))
  console.log('    $ seven init ${project-name}')
  console.log()
});

/**
 * Padding
 */
console.log();
process.on('exit', function() {
  console.log();
});

/**
 * Settings
 */
const rawName = program.args[0];
const inPlace = !rawName || rawName === '.';
const name = inPlace
  ? path.relative('../', process.cwd())
  : rawName;
const to = path.resolve(rawName || '.');
const clone = program.clone || false;
const isExists = exists(to);
let template;
let tmp;
let opts;

if (isExists) {
  prompts.unshift({
    type: 'confirm',
    message: inPlace
      ? '在现有目录下新建子目录?'
      : '目录已存在 是否继续?',
    name: 'ok'
  });
}

inquirer.prompt(prompts).then(function(answers) {
  opts = Object.assign(answers, { name });
  template = answers.template;
  tmp = path.join(home, '.seven-templates', template.replace(/\//g, '-'))
  if (program.offline) {
    console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
    template = tmp;
  }

  if (isExists) {
    if (answers.ok) {
      run();
    }
  } else {
    run();
  }
});

function run() {
  console.log(localPath.isLocalPath(template));
  if (localPath.isLocalPath(template)) {
    const templatePath = localPath.getTemplatePath(template);
    if (exists(templatePath)) {
      generate(opts, templatePath, to, function(err) {
        if (err) logger.fatal(err);
        console.log();
        logger.success('Generated "%s".', name);
      });
    } else {
      logger.fatal('Local template "%s" not found.', template);
    }
  } else {
    checkVersion(downloadAndGenerate);
  }
}

function downloadAndGenerate() {
  let spinner = ora('downloading template...');

  template = `yuanzhaohao/template-${template}`;
  spinner.start();
  if (exists(tmp)) rm(tmp);

  download(template, tmp, {
    clone: clone
  }, function(err) {
    spinner.stop();
    if (err) {
      console.log(chalk.red('Failed to download repo ' + template + ': ' + err.message.trim()));
    }
    generate(opts, tmp, to, function(err) {
      if (err) logger.fatal(err);
      console.log()
      logger.success('Generated "%s".', name);
    });
  });
}
